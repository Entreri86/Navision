OBJECT Codeunit 415 Release Purchase Document
{
  OBJECT-PROPERTIES
  {
    Date=07/02/19;
    Time=13:34:31;
    Modified=Yes;
    Version List=NAVW13.70,COM, SGR, 053;
  }
  PROPERTIES
  {
    TableNo=38;
    OnRun=VAR
            PurchLine@1000 : Record 39;
            TempVATAmountLine0@1001 : TEMPORARY Record 290;
            TempVATAmountLine1@1002 : TEMPORARY Record 290;
            NotOnlyDropShipment@1003 : Boolean;
            rptPedidoCompra@1103351000 : Report 405;
            recProveedor@1103351001 : Record 23;
            PedidoCompraL¡neas@1000000000 : Record 39;
            CduAnexosTpc@1000000001 : Codeunit 50007;
            Validacion@1000000002 : Decimal;
            FormularioValidaci¢n@1000000003 : Form 50009;
            s_rec_purc_line@1000000004 : Record 39;
            s_rec_producto@1000000005 : Record 27;
            PurchLine2@7141743 : Record 39;
          BEGIN
            IF "Aprobacion Pedido" THEN
              ERROR ( Text50003 );

            IF Status = Status::Released THEN
              EXIT;

            // - 001
            IF "Document Type"="Document Type"::Order THEN BEGIN
              Validacion :=0;
              PedidoCompraL¡neas.SETRANGE("Document Type","Document Type"::Order);
              PedidoCompraL¡neas.SETRANGE("Document No.","No.");
              IF PedidoCompraL¡neas.FINDFIRST THEN BEGIN
                REPEAT;
                  Validacion := CduAnexosTpc."Rotaci¢n Compras"(PedidoCompraL¡neas."No.",PedidoCompraL¡neas.Quantity);
                UNTIL (PedidoCompraL¡neas.NEXT=0) OR (Validacion>0) ;
              END;
              IF Validacion >0 THEN BEGIN
                IF Importada=FALSE THEN BEGIN
                  IF CONFIRM('Este pedido contiene cantidades que sobrepasan las autorizadas. ¨Est  seguro que lo quiere confirmar?') THEN BEGIN
                    //COMMIT;
                    //FormularioValidaci¢n.RUNMODAL;
                  END ELSE BEGIN
                    ERROR('Proceso detenido por el operador');
                  END;
                END;
              END;
            END;
            // + 001

            {
            if confirm('¨Desea enviar el email al proveedor?') then begin
            // - COM08:001:
            CLEAR(rptPedidoCompra) ;
            rptPedidoCompra.SETTABLEVIEW(Rec);
            rptPedidoCompra.SAVEASHTML('c:\z\Pedido Compra.HTML');
            recProveedor.RESET;
            IF recProveedor.GET("Buy-from Vendor No.") THEN BEGIN
              Retorno := 13;
              firma:=STRSUBSTNO('%1TPC ',Retorno);
              Mail.NewMessageTPC(recProveedor."E-Mail",'',STRSUBSTNO('Pedido compra %1 ',"No."),
                 Body+firma,'Pedido Compra.HTML',TRUE);
            END;
            // + COM08:001:
            end;
            }

            // -002 SGR
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              s_rec_purc_line.RESET;
              s_rec_purc_line.SETRANGE("Document Type", "Document Type") ;
              s_rec_purc_line.SETRANGE("Document No.", "No.");
              IF s_rec_purc_line.FINDFIRST THEN REPEAT
                IF s_rec_producto.GET(s_rec_purc_line."No.") THEN
                  IF s_rec_producto."Desglosar pedido"=TRUE THEN
                    CODEUNIT.RUN ( CODEUNIT::"Purch.-Explode BOM", s_rec_purc_line );
              UNTIL s_rec_purc_line.NEXT = 0;
            END;
            // +002


            TESTFIELD("Buy-from Vendor No.");

            PurchLine.SETRANGE("Document Type","Document Type");
            PurchLine.SETRANGE("Document No.","No.");
            PurchLine.SETFILTER(Type,'>0');
            PurchLine.SETFILTER(Quantity,'<>0');
            IF NOT PurchLine.FIND('-') THEN
              ERROR(Text001,"Document Type","No.");
            InvtSetup.GET;
            IF (InvtSetup."Location Mandatory") THEN BEGIN
              PurchLine.SETRANGE(Type,PurchLine.Type::Item);
              IF PurchLine.FIND('-') THEN
                REPEAT
                  PurchLine.TESTFIELD("Location Code");
                UNTIL PurchLine.NEXT = 0;
              PurchLine.SETFILTER(Type,'>0');
            END;
            PurchLine.SETRANGE("Drop Shipment",FALSE);
            NotOnlyDropShipment := PurchLine.FIND('-');
            PurchLine.RESET;

            PurchSetup.GET;
            IF PurchSetup."Calc. Inv. Discount" THEN BEGIN
              CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
              GET("Document Type","No.");
            END;

            Status := Status::Released;

            PurchLine.SetPurchHeader(Rec);
            PurchLine.CalcVATAmountLines(0,Rec,PurchLine,TempVATAmountLine0);
            PurchLine.CalcVATAmountLines(1,Rec,PurchLine,TempVATAmountLine1);
            PurchLine.UpdateVATOnLines(0,Rec,PurchLine,TempVATAmountLine0);
            PurchLine.UpdateVATOnLines(1,Rec,PurchLine,TempVATAmountLine1);

            MODIFY(TRUE);

            IF NotOnlyDropShipment THEN
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
                WhsePurchRelease.Release(Rec);

            COMMIT;

            {
            g_rec_Vendor.GET ( "Buy-from Vendor No." );
            IF g_rec_Vendor."Empresa UNIX" <> '' THEN BEGIN
              CLEAR(g_dpt_PedidosGRUPO);
              g_dpt_PedidosGRUPO.Mostrar;
              g_dpt_PedidosGRUPO.SetPedido ( Rec );
              g_dpt_PedidosGRUPO.RUNMODAL;
            END;
            }

            //-999 16/08/18
            CLEAR(PurchLine2);
            PurchLine2.SETRANGE("Document Type","Document Type");
            PurchLine2.SETRANGE("Document No.","No.");
            //+999 16/08/18

            IF ( "Document Type" = "Document Type"::Order ) AND
               ( ( "Buy-from Vendor No." = PurchSetup."C¢d. proveedor transformat" ) OR
                 ( "Buy-from Vendor No." = PurchSetup."C¢d. proveedor LM" )
                 OR ("Buy-from Vendor No." = PurchSetup."C¢d. proveedor Equipamientos") ) THEN  //-999 11/07/17 A¤ado esta condici¢n
              IF ( "Buy-from Vendor No." = PurchSetup."C¢d. proveedor transformat" ) AND (Importada = FALSE)THEN BEGIN
                IF CONFIRM ( Text50000, FALSE, "No.", 'TRANSFORMAD' ) THEN BEGIN
                  CLEAR(g_dpt_PedidosTransformad);
                  g_dpt_PedidosTransformad.SETTABLEVIEW(PurchLine2);   //-999 16/08/18
                  g_dpt_PedidosTransformad.Mostrar;
                  g_dpt_PedidosTransformad.SetPedido ( Rec );
                  g_dpt_PedidosTransformad.RUNMODAL;
                  g_dpt_PedidosTransformad.SubiraFTP;
                  // 053 >> Funci¢n para subir los cambios mediante WS a BC
                  SendXML_To_BusinessCentral(PurchLine2);
                  // 053 <<
                END
              END
              ELSE BEGIN
                IF ( "Buy-from Vendor No." = PurchSetup."C¢d. proveedor LM" ) AND (Importada = FALSE) THEN
                  IF CONFIRM ( Text50000, FALSE, "No.", 'LM' ) THEN BEGIN
                    CLEAR(g_dpt_PedidosTransformad);
                    g_dpt_PedidosTransformad.SETTABLEVIEW(PurchLine2);   //-999 16/08/18
                    g_dpt_PedidosTransformad.Mostrar;
                    g_dpt_PedidosTransformad.SetPedido ( Rec );
                    g_dpt_PedidosTransformad.RUNMODAL;
                    g_dpt_PedidosTransformad.SubiraFTP;
                    // 053 >> Funci¢n para subir los cambios mediante WS a BC
                    SendXML_To_BusinessCentral(PurchLine2);
                    // 053 <<
                  END;
                  //-999 11/07/17
                  IF ( "Buy-from Vendor No." = PurchSetup."C¢d. proveedor Equipamientos" ) AND (Importada = FALSE) THEN
                    IF CONFIRM ( Text50000, FALSE, "No.", 'EQUIPAMIENTOS' ) THEN BEGIN
                      CLEAR(g_dpt_PedidosTransformad);
                      g_dpt_PedidosTransformad.SETTABLEVIEW(PurchLine2);   //-999 16/08/18
                      g_dpt_PedidosTransformad.Mostrar;
                      g_dpt_PedidosTransformad.SetPedido ( Rec );
                      g_dpt_PedidosTransformad.RUNMODAL;
                      g_dpt_PedidosTransformad.SubiraFTP;
                      // 053 >> Funci¢n para subir los cambios mediante WS a BC
                      SendXML_To_BusinessCentral(PurchLine2);
                      // 053 <<
                    END
                  //+999 11/07/17
              END;

            g_recPurchaseLine.RESET;
            g_recPurchaseLine.SETCURRENTKEY ( "Document Type", "Document No.", "Line No." );
            g_recPurchaseLine.SETRANGE ( "Document Type", "Document Type" );
            g_recPurchaseLine.SETRANGE ( "Document No.", "No." );
            IF g_recPurchaseLine.FINDFIRST THEN REPEAT
              g_recPurchaseLine."Status Cab" := Status;
              g_recPurchaseLine.MODIFY;
            UNTIL g_recPurchaseLine.NEXT = 0;
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=There is nothing to release for %1 %2.;ESP=No hay nada para lanzar para %1 %2.';
      PurchSetup@1002 : Record 312;
      InvtSetup@1000 : Record 313;
      WhsePurchRelease@1004 : Codeunit 5772;
      g_dpt_PedidosTransformad@1103351000 : Dataport 50001;
      Text50000@1103351001 : TextConst 'ESP=¨Desea enviar el pedido %1 a %2 ?';
      Text50003@1103351002 : TextConst 'ESP=El documento esta pendiente de una aprobacion.';
      g_dpt_PedidosGRUPO@1000000001 : Dataport 50080;
      g_rec_Vendor@1000000000 : Record 23;
      g_recPurchaseLine@1103358001 : Record 39;
      lbtxtXML@7141743 : TextConst 'ESP=una polla';

    PROCEDURE Reopen@1(VAR PurchHeader@1000 : Record 38);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      WITH PurchHeader DO BEGIN
        IF Status = Status::Open THEN
          EXIT;
        IF "Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"] THEN
          WhsePurchRelease.Reopen(PurchHeader);
        Status := Status::Open;
        PurchLine.SetPurchHeader(PurchHeader);
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETFILTER(Type,'>0');
        PurchLine.SETFILTER(Quantity,'<>0');
        IF PurchLine.FIND('-') THEN
          REPEAT
            PurchLine.Amount := 0;
            PurchLine."Amount Including VAT" := 0;
            PurchLine."VAT Base Amount" := 0;
            PurchLine.InitOutstandingAmount;
            PurchLine.MODIFY;
          UNTIL PurchLine.NEXT = 0;
        PurchLine.RESET;
        MODIFY(TRUE);

        g_recPurchaseLine.RESET;
        g_recPurchaseLine.SETCURRENTKEY ( "Document Type", "Document No.", "Line No." );
        g_recPurchaseLine.SETRANGE ( "Document Type", "Document Type" );
        g_recPurchaseLine.SETRANGE ( "Document No.", "No." );
        IF g_recPurchaseLine.FINDFIRST THEN REPEAT
          g_recPurchaseLine."Status Cab" := Status;
          g_recPurchaseLine.MODIFY;
        UNTIL g_recPurchaseLine.NEXT = 0;

      END;
    END;

    PROCEDURE CreateAccLineIRPF@1000000000(PurchaseHeader@1000000016 : Record 38) Created@1000000018 : Boolean;
    VAR
      PurchaseLines@1000000019 : Record 39;
      Amount@1000000020 : Decimal;
      VendPostGroup@1000000017 : Record 93;
      Vendor@1000000014 : Record 23;
      LineNo@1000000015 : Integer;
      l_cod_CuentaIRPF@1103351001 : Code[9];
      l_txt_Retencion@1103351000 : Text[30];
      l_rec_GLAcc@1103351002 : Record 15;
      Text50001@1103351003 : TextConst 'ESP=No existe la cuenta contable de IRPF al %1 %.';
      l_rec_GLSetup@1103351004 : Record 98;
      NumberRetentionLine@1103351005 : Integer;
      AmountIRPF@1103351006 : Decimal;
    BEGIN
      // IRPF BEGIN
      Created := FALSE ;
      WITH PurchaseHeader DO BEGIN
           IF "% Income Tax Retention" <> 0 THEN BEGIN
              l_cod_CuentaIRPF := '475';
              l_txt_Retencion := FORMAT ( "% Income Tax Retention" );
              l_cod_CuentaIRPF := l_cod_CuentaIRPF + PADSTR ( '', 6 - STRLEN ( l_txt_Retencion ), '0' ) + l_txt_Retencion;
              IF NOT l_rec_GLAcc.GET (l_cod_CuentaIRPF) THEN
                ERROR ( Text50001, l_txt_Retencion );
              Amount := 0 ;
              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
                 PurchaseLines.SETFILTER("Document Type",'=%1',"Document Type") ;
                 PurchaseLines.SETFILTER(Type,'<>%1',PurchaseLines.Type::" ") ;
                 PurchaseLines.SETFILTER("Document No.","No.") ;
                 PurchaseLines.SETFILTER(Quantity,'<>%1',0) ;
                 IF PurchaseLines.FIND('-') THEN BEGIN
                    Vendor.GET(PurchaseHeader."Buy-from Vendor No.") ;
                    VendPostGroup.GET(Vendor."Vendor Posting Group") ;
                    VendPostGroup.TESTFIELD("Income Tax Retention Acc.") ;
                    REPEAT
                      IF PurchaseLines."Income Tax Exent"=FALSE THEN
                        Amount := Amount + ROUND(PurchaseLines."Line Amount" * PurchaseLines."Qty. to Invoice"
                                         / PurchaseLines.Quantity,l_rec_GLSetup."Amount Rounding Precision") ;
                      NumberRetentionLine := PurchaseLines."Line No." ;
                    UNTIL PurchaseLines.NEXT = 0 ;
                    NumberRetentionLine := NumberRetentionLine + 10000 ;

                    IF Amount <>0 THEN BEGIN
                      PurchaseLines.INIT ;
                      PurchaseLines."Line No." := NumberRetentionLine ;
                      PurchaseLines."Document Type" := "Document Type" ;
                      PurchaseLines."Document No." := "No." ;
                      PurchaseLines."Buy-from Vendor No." := "Buy-from Vendor No." ;
                      PurchaseLines.VALIDATE(Type,PurchaseLines.Type::"G/L Account") ;
      //                PurchaseLines.VALIDATE("No.",VendPostGroup."Income Tax Retention Acc.") ;
                      PurchaseLines.VALIDATE("No.",l_cod_CuentaIRPF) ;
                      PurchaseLines.Description := DELCHR(PurchaseLines.Description,'<',' ') ;
                      PurchaseLines.VALIDATE(Quantity,1) ;
                      IF "Document Type" <> "Document Type"::"Credit Memo" THEN
                        PurchaseLines.VALIDATE("Qty. to Receive",PurchaseLines.Quantity) ;
                      PurchaseLines.VALIDATE("Qty. to Invoice",PurchaseLines.Quantity) ;
                      IF (NOT Ship) AND ("Document Type" = "Document Type"::Order) THEN BEGIN
                         PurchaseLines."Qty. to Receive (Base)" := 1 ;
                         PurchaseLines."Qty. to Receive" := 1 ;
                      END ;
                      PurchaseLines.VALIDATE("Direct Unit Cost",-(Amount * "% Income Tax Retention")/100) ;
                      PurchaseLines.VALIDATE("Line Amount",-(Amount * "% Income Tax Retention")/100) ;
                      PurchaseLines."Income Tax Line" := TRUE;
                      PurchaseLines.INSERT ;

                      AmountIRPF := PurchaseLines.Amount ;
                    END;

                    Created := TRUE ;
                 END ;
              END ;
          END ;
      END ;
      // IRPF END
    END;

    PROCEDURE SendXML_To_BusinessCentral@7141793(VAR PurchaseLines@7141744 : Record 39) : Text[50];
    VAR
      XMLHTTPConn@7141759 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{AFBA6B42-5692-48EA-8141-DC517DCF0EF1}:'Microsoft XML, v4.0'.ServerXMLHTTP";
      XMLHttp@7141743 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{F6D90F16-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v4.0'.XMLHTTP";
      XMLDoc@7141762 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v4.0'.DOMDocument";
      ParXMLDoc@7141765 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v4.0'.DOMDocument";
      ParXMLDocV4@7141778 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v4.0'.DOMDocument";
      SoapEnvelope@7141764 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMElement";
      SoapBody@7141763 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMElement";
      SoapMethod@7141761 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMElement";
      SoapHeader@7141769 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMElement";
      CreateItemNode@7141768 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMElement";
      NewNode@7141760 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      ReturnNode@7141776 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      CurrNode@7141770 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      DomNodeText@7141779 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMText";
      ItemDescNode@7141771 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      ItemUnitNode@7141772 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      ItemInventoryNode@7141773 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      ItemGenPostingNode@7141775 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      Node@7141774 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNode";
      NodeList@7141766 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 4.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v4.0'.IXMLDOMNodeList";
      WS_URL@7141749 : Text[1024];
      WS_User@7141750 : Text[250];
      WS_Passwd@7141751 : Text[250];
      RequestFilePath@7141781 : Text[1024];
      Item@7141752 : Record 27;
      NodeValue@7141754 : Text[1024];
      ItemNoCode@7141756 : Code[20];
      StyleOutStr@7141746 : OutStream;
      StyleInStr@7141748 : InStream;
      TempBlobTable@7141747 : TEMPORARY Record 99008535;
      InStr@7141753 : InStream;
      OutStr@7141757 : OutStream;
      XP1@7141758 : XMLport 50001;
      Opened@7141767 : Boolean;
      ParsedPath@7141777 : Text[250];
      NodeLenght@7141745 : Integer;
      iCount@7141755 : Integer;
      FileLenght@7141783 : Integer;
      FileParsed@7141780 : File;
      TextReaded@7141784 : Text[1024];
      XMLInText@7141782 : Text[1024];
      NodeTextValue@7141785 : Text[50];
    BEGIN
      CLEAR(PurchSetup);
      PurchSetup.GET();

      RequestFilePath := 'C:\XMLRequest.xml';
      CREATE(XMLDoc,TRUE,TRUE);
      XMLDoc.async(FALSE);


      SoapEnvelope := XMLDoc.createElement('soapenv:Envelope');
      SoapEnvelope.setAttribute('xmlns:soapenv', 'http://schemas.xmlsoap.org/soap/envelope/');
      SoapEnvelope.setAttribute('xmlns:item', 'urn:microsoft-dynamics-schemas/codeunit/ItemMgt');
      XMLDoc.appendChild(SoapEnvelope);

      SoapHeader := XMLDoc.createElement('soapenv:Header');
      SoapEnvelope.appendChild(SoapHeader);

      SoapBody := XMLDoc.createElement('soapenv:Body');
      SoapEnvelope.appendChild(SoapBody);

      SoapMethod := XMLDoc.createElement('item:CreateItemsFromNav2009');
      SoapBody.appendChild(SoapMethod);



      WS_User := PurchSetup."WS User";
      WS_Passwd := PurchSetup."WS Password";
      WS_URL := PurchSetup."WS Business C URL";

      IF PurchaseLines.FINDFIRST THEN BEGIN
        REPEAT
          CLEAR(Item);
          IF Item.GET(PurchaseLines."No.") THEN BEGIN

            CREATE(ParXMLDoc,TRUE,TRUE);
            ParXMLDoc.async(FALSE);

            NewNode  := ParXMLDoc.createNode(1,'UUCreateItemsFromNav2009','');
            ParXMLDoc.appendChild(NewNode);
            CurrNode := NewNode;

            NewNode := ParXMLDoc.createNode(1,'OOitemNo','');
            CurrNode.appendChild(NewNode);
            DomNodeText := ParXMLDoc.createTextNode(PurchaseLines."No.");
            NewNode.appendChild(DomNodeText);

            NewNode := ParXMLDoc.createNode(1,'OOitemDescription','');
            CurrNode.appendChild(NewNode);
            DomNodeText := ParXMLDoc.createTextNode(Item.Description);
            NewNode.appendChild(DomNodeText);

            NewNode := ParXMLDoc.createNode(1,'OOitemUnitOfMeasure','');
            CurrNode.appendChild(NewNode);
            DomNodeText := ParXMLDoc.createTextNode(Item."Base Unit of Measure");
            NewNode.appendChild(DomNodeText);

            NewNode := ParXMLDoc.createNode(1,'OOinventoryPostingGroup','');
            CurrNode.appendChild(NewNode);
            DomNodeText := ParXMLDoc.createTextNode(Item."Inventory Posting Group");
            NewNode.appendChild(DomNodeText);

            NewNode := ParXMLDoc.createNode(1,'OOgenProdPostingGroup','');
            CurrNode.appendChild(NewNode);
            DomNodeText := ParXMLDoc.createTextNode(Item."Gen. Prod. Posting Group");
            NewNode.appendChild(DomNodeText);

            //Guardamos...
            ParXMLDoc.save(RequestFilePath);
            //Parseamos...
            ParsedPath := ParseXMLFile(RequestFilePath);
            FileParsed.TEXTMODE(TRUE);
            FileParsed.WRITEMODE(FALSE);
            Opened := FileParsed.OPEN(ParsedPath);
            IF Opened THEN BEGIN
              FileLenght := FileParsed.LEN;
              WHILE FileParsed.POS < FileLenght DO BEGIN
                FileParsed.READ(TextReaded);
                XMLInText := XMLInText + TextReaded;
              END;
            END;
            // Create XMLHTTP and SEND
            CREATE(XMLHttp, TRUE, TRUE);
            XMLHttp.open('POST', WS_URL, FALSE,WS_User,WS_Passwd);
            XMLHttp.setRequestHeader('Content-type', 'text/xml;charset=UTF-8');
            XMLHttp.setRequestHeader('SOAPAction', 'urn:microsoft-dynamics-schemas/codeunit/ItemMgt:CreateItemsFromNav2009');
            XMLHttp.setRequestHeader('Host','fotal-1901.westeurope.cloudapp.azure.com:7047');

            XMLHttp.send(XMLInText);
            IF XMLHttp.status=200 THEN
            BEGIN
              XMLDoc := XMLHttp.responseXML;
              XMLDoc.setProperty('SelectionLanguage','XPath');
              XMLDoc.setProperty('SelectionNamespaces','xmlns:tns="urn:microsoft-dynamics-schemas/codeunit/ItemMgt"');
              NodeList := XMLDoc.selectNodes('//tns:return_value');
              ReturnNode := NodeList.item(0);
              NodeTextValue := ReturnNode.text;
            END;
          END;
        UNTIL PurchaseLines.NEXT = 0;
      END;
    END;

    PROCEDURE ParseXMLFile@7141744(FilePath@7141743 : Text[250]) ParsedFile : Text[250];
    VAR
      VarFileToParse@7141744 : File;
      FileParsed@7141750 : File;
      TextLine@7141745 : Text[1024];
      TextLineParsed@7141754 : Text[1024];
      FileLenght@7141746 : Integer;
      Opened@7141747 : Boolean;
      MarkChar@7141748 : TextConst 'ESP=OO';
      MarkedPos@7141749 : Integer;
      TrueFilePath@7141751 : Text[1024];
      OutStream@7141752 : OutStream;
      MarkCreateItemsTag@7141756 : TextConst 'ESP=UU';
      ItemNoTag@7141753 : TextConst 'ESP=item:';
      FirstTime@7141755 : Boolean;
    BEGIN

      TrueFilePath := 'C:\XMLTrueRequest.xml';
      VarFileToParse.TEXTMODE(TRUE);
      VarFileToParse.WRITEMODE(FALSE);
      Opened := VarFileToParse.OPEN(FilePath);

      FileParsed.CREATE(TrueFilePath);
      FileParsed.CREATEOUTSTREAM(OutStream);
      FileParsed.TEXTMODE(TRUE);
      FileParsed.WRITEMODE(TRUE);
      //Creamos estructura inicial
      CreateSoapStructure(FileParsed, TRUE);

      IF Opened THEN BEGIN
        FileLenght := VarFileToParse.LEN;
        FirstTime := TRUE;
        WHILE VarFileToParse.POS < FileLenght DO BEGIN
          CLEAR(TextLine);
          VarFileToParse.READ(TextLine);
          MarkedPos := STRPOS(TextLine,MarkChar);
          // Si no encuentra la marca guardamos la l¡nea tal cual.
          IF MarkedPos = 0 THEN
            FileParsed.WRITE(TextLine)
          ELSE BEGIN
            TextLineParsed := ReplaceString(TextLine,MarkCreateItemsTag,ItemNoTag);
            TextLineParsed := ReplaceString(TextLineParsed,MarkChar,ItemNoTag);
            FileParsed.WRITE(TextLineParsed);
          END;
          //Cerramos tags
          CreateSoapStructure(FileParsed, FALSE);
          VarFileToParse.CLOSE;
          FileParsed.CLOSE;
          EXIT(TrueFilePath);
        END;
      END;
    END;

    PROCEDURE ReplaceString@7141760(StringToParse@7141743 : Text[1024];MarkToSearch@7141744 : Text[30];StringToReplace@7141745 : Text[30]) StringParsed : Text[1024];
    VAR
      StringBackup@7141747 : Text[1024];
    BEGIN

      WHILE STRPOS(StringToParse,MarkToSearch) > 0 DO BEGIN
        StringToParse := DELSTR(StringToParse,STRPOS(StringToParse,MarkToSearch)) + StringToReplace +
                  COPYSTR(StringToParse,STRPOS(StringToParse,MarkToSearch) + STRLEN(MarkToSearch));
      END;
      StringParsed := StringToParse;

      EXIT(StringParsed);
    END;

    PROCEDURE CreateSoapStructure@7141762(VAR FinalFile@7141743 : File;IsInitial@7141749 : Boolean);
    VAR
      SoapEnvInitialTag@7141748 : Text[1024];
      SoapEnvFinallTag@7141747 : Text[1024];
      SoapBodyInitialTag@7141746 : Text[1024];
      SoapBodyFinalTag@7141745 : Text[1024];
      SoapHeaderTag@7141744 : Text[1024];
      SoapCreateItemsInitialTag@7141751 : Text[1024];
      SoapCreateItemsFinalTag@7141750 : Text[1024];
    BEGIN
      SoapEnvInitialTag := '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" '+
                           'xmlns:item="urn:microsoft-dynamics-schemas/codeunit/ItemMgt">';
      SoapEnvFinallTag := '</soapenv:Envelope>';

      SoapHeaderTag := '<soapenv:Header/>';

      SoapBodyInitialTag := '<soapenv:Body>';
      SoapBodyFinalTag := '</soapenv:Body>';

      SoapCreateItemsInitialTag := '<item:CreateItemsFromNav2009>';
      SoapCreateItemsFinalTag := '</item:CreateItemsFromNav2009>';

      IF IsInitial THEN BEGIN
        FinalFile.WRITE(SoapEnvInitialTag);
        FinalFile.WRITE(SoapHeaderTag);
        FinalFile.WRITE(SoapBodyInitialTag);
      END ELSE BEGIN
        FinalFile.WRITE(SoapBodyFinalTag);
        FinalFile.WRITE(SoapEnvFinallTag);
      END;
    END;

    BEGIN
    {
      // 001 Pide autorizaci¢n para lanzar un pedido que tiene alguna l¡nea en rojo (Aplicada f¢rmula)
      // 002 En los productos que tienen la opci¢n de "Desglosar Pedido" se explota directamente el detalle del mismo al lanzar

      -999 jmenendez 11/07/17 Traspaso lineas pedido compra via ftp
           jmenendez 16/08/18 Incidencia al generar el fichero.En el request form del dataport no se grababa el pedido correspondiente

      -053 fotal     04/02/2019 Gestionar la subida de las l¡neas de compra a Business central.
    }
    END.
  }
}

